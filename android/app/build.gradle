def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "cc.aoeiuv020.flutter.demo"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    // debug和release使用相同签名，以便用debug包覆盖release包从而调试，
    // 如果没有，就会使用默认debug签名，
    def signingFile = rootProject.file('key.properties')
    String sha1 = null
    if (signingFile.exists()) {
        def input = signingFile.newInputStream()
        def p = new Properties()
        p.load(input)
        input.close()
        // 签名文件存在才配置签名，
        def jks = rootProject.file(p['storeFile'])
        if (jks.exists()) {
            signingConfigs {
                config {
                    keyAlias p['keyAlias']
                    keyPassword p['keyPassword']
                    storeFile jks
                    storePassword p['storePassword']
                    v1SigningEnabled true
                    v2SigningEnabled true
                }
            }
            buildTypes {
                debug.signingConfig signingConfigs.config
                release.signingConfig signingConfigs.config
            }
            def signingConfig = signingConfigs.config
            if (signingConfig != null) {
                //noinspection UnnecessaryQualifiedReference
                def keyStore = java.security.KeyStore.getInstance(
                        signingConfig.getStoreType() != null ?
                                signingConfig.getStoreType() : KeyStore.getDefaultType())
                FileInputStream fis = new FileInputStream(signingConfig.getStoreFile())
                keyStore.load(fis, signingConfig.getStorePassword().toCharArray())
                fis.close()
                char[] keyPassword = signingConfig.getKeyPassword().toCharArray()
                //noinspection UnnecessaryQualifiedReference
                def entry = keyStore.getEntry(
                        signingConfig.getKeyAlias(),
                        new java.security.KeyStore.PasswordProtection(keyPassword))
                if (entry != null) {
                    //noinspection UnnecessaryQualifiedReference
                    def digest = java.security.MessageDigest.getInstance("SHA-1")
                    sha1 = digest.digest(entry.getCertificate().encoded).encodeHex().toString()
                }
            }
        }
    }
    if (sha1 == null) {
        defaultConfig.buildConfigField('String', "SIGNATURE", 'null')
    } else {
        defaultConfig.buildConfigField('String', "SIGNATURE", '"' + sha1 + '"')
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
