name: CI
env:
    TZ: Asia/Shanghai
on:
  push:
    tags:
      - '*'
    branches:
      - master
    paths-ignore:
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'
jobs:
  build_env:
    name: build env
    runs-on: ubuntu-latest
    steps:
    - name: init custom env
      run: |
          BUILD_NAME="${GITHUB_REPOSITORY#*/}"
          if [[ ${GITHUB_REF} == refs/tags* ]]
          then
              echo CREATE_RELEASE="true" >> .custom_env
              BUILD_VERSION=${GITHUB_REF#refs/tags/}
          elif [[ ${GITHUB_REF} == refs/pull* ]]
          then
              num=${GITHUB_REF#refs/pull/}
              num=${num%/merge}
              BUILD_VERSION=pr-${num}-"$(date +'%Y%m%d%H%M%S')"
          else
              echo CREATE_RELEASE="true" >> .custom_env
              echo PRE_RELEASE="true" >> .custom_env
              BUILD_VERSION="$(date +'%Y%m%d%H%M%S')"
          fi
          BUILD_NAME_WITH_VERSION="$BUILD_NAME-$BUILD_VERSION"
          echo BUILD_NAME="$BUILD_NAME" >> .custom_env
          echo BUILD_VERSION="$BUILD_VERSION" >> .custom_env
          echo BUILD_NAME_WITH_VERSION="$BUILD_NAME_WITH_VERSION" >> .custom_env
          if test -n "${{ secrets.KEY_PROPERTIES }}"
          then
              echo "${{ secrets.KEY_PROPERTIES }}" > signing.properties
              if test -n "${{ secrets.SIGNING_KEY }}"
              then
                  echo ANDROID_SIGN="true" >> .custom_env
              fi
              cat signing.properties >> .custom_env
          fi
          cat .custom_env
          cat .custom_env >> $GITHUB_ENV
    - name: upload .custom_env
      uses: actions/upload-artifact@master
      with:
          name: custom_env
          path: ./.custom_env
    - name: clean custom env
      run: rm .custom_env
  build_web:
    needs: [build_env]
    name: Build Flutter (Web)
    runs-on: ubuntu-latest
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
          name: custom_env
    - name: apply custom env
      run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
    - uses: actions/checkout@v2
    - uses: subosito/flutter-action@v1
      with:
          channel: 'stable'
    - run: |
          flutter pub get
          flutter build web
          cd build/web
          zip -r ../$BUILD_NAME_WITH_VERSION-web.zip * .[^.]*
          cd ../../
    - name: Archive Production Artifact
      uses: actions/upload-artifact@master
      with:
        name: web-build
        path: build/${{ env.BUILD_NAME_WITH_VERSION }}-web.zip
  build_linux:
    needs: [build_env]
    name: Build Flutter (Linux)
    runs-on: ubuntu-latest
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
          name: custom_env
    - name: apply custom env
      run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
    - uses: actions/checkout@v2
    - uses: subosito/flutter-action@v1
      with:
          channel: 'stable'
    - run: |
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          flutter config --enable-linux-desktop
          flutter pub get
          flutter build linux --release
          cd build/linux/x64/release/bundle
          zip -r $GITHUB_WORKSPACE/build/$BUILD_NAME_WITH_VERSION-linux.zip * .[^.]*
    - name: Archive Production Artifact
      uses: actions/upload-artifact@master
      with:
        name: linux-build
        path: build/${{ env.BUILD_NAME_WITH_VERSION }}-linux.zip
  build_ios:
    needs: [build_env]
    name: Build Flutter (iOS)
    runs-on: macos-latest
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
          name: custom_env
    - name: apply custom env
      run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - uses: subosito/flutter-action@v1
      with:
          channel: 'stable'
    - run: |
          flutter pub get
          flutter clean
          flutter build ios --release --no-codesign
    - name: build ios ipa
      run: |
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r $BUILD_NAME_WITH_VERSION-ios.ipa Payload
    - name: Upload iPA
      uses: actions/upload-artifact@master
      with:
        name: ios-build
        path: build/ios/iphoneos/${{ env.BUILD_NAME_WITH_VERSION }}-ios.ipa
  build_android:
    needs: [build_env]
    name: Build Flutter (Android)
    runs-on: ubuntu-latest
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
          name: custom_env
    - name: apply custom env
      run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - uses: subosito/flutter-action@v1
      with:
          channel: 'stable'
    - run: flutter pub get
    - run: flutter build apk --target-platform android-arm64
    - uses: AoEiuV020/sign-android-release@v2
      name: Sign release APK
      if: ${{ env.ANDROID_SIGN == 'true' }}
      with:
        releaseDirectory: build/app/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ env.keyAlias }}
        keyStorePassword: ${{ env.storePassword }}
        keyPassword: ${{ env.keyPassword }}
    - name: pick release file
      run: mv build/app/outputs/apk/release/*.apk build/$BUILD_NAME_WITH_VERSION-android.apk
    - name: Upload APK
      uses: actions/upload-artifact@master
      with:
        name: android-build
        path: build/${{ env.BUILD_NAME_WITH_VERSION }}-android.apk
  release:
    needs: [build_env, build_web, build_linux, build_ios, build_android]
    name: make release
    runs-on: ubuntu-latest
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
          name: custom_env
    - name: apply custom env
      run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
    - name: download web
      uses: actions/download-artifact@v2
      with:
          name: web-build
    - name: download linux
      uses: actions/download-artifact@v2
      with:
          name: linux-build
    - name: download ios
      uses: actions/download-artifact@v2
      with:
          name: ios-build
    - name: download android
      uses: actions/download-artifact@v2
      with:
          name: android-build
    - name: create release
      if: ${{ env.CREATE_RELEASE == 'true' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.BUILD_VERSION }}
        release_name: ${{ env.BUILD_VERSION }}
        body: ${{ github.event.head_commit.message }}
        draft: true
        prerelease: ${{ env.PRE_RELEASE == 'true' }}
    - name: Upload Release Asset web
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.BUILD_NAME_WITH_VERSION }}-web.zip
        asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}-web.zip
        asset_content_type: application/zip
    - name: Upload Release Asset linux
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.BUILD_NAME_WITH_VERSION }}-linux.zip
        asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}-linux.zip
        asset_content_type: application/zip
    - name: Upload Release Asset ios
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.BUILD_NAME_WITH_VERSION }}-ios.ipa
        asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}-ios.ipa
        asset_content_type: application/zip
    - name: Upload Release Asset android
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.BUILD_NAME_WITH_VERSION }}-android.apk
        asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}-android.apk
        asset_content_type: application/zip
    - name: public release
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
