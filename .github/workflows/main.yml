name: CI
env:
    TZ: Asia/Shanghai
on:
  push:
    tags:
      - '*'
    branches:
      - master
    paths-ignore:
      - '**/README.md'
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/README.md'
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'
jobs:
  build_env:
    name: build env
    runs-on: ubuntu-latest
    steps:
    - name: init custom env
      run: |
          BUILD_NAME="${GITHUB_REPOSITORY#*/}"
          if [[ ${GITHUB_REF} == refs/tags* ]]
          then
              echo CREATE_RELEASE="true" >> .custom_env
              BUILD_VERSION=${GITHUB_REF#refs/tags/}
          elif [[ ${GITHUB_REF} == refs/pull* ]]
          then
              num=${GITHUB_REF#refs/pull/}
              num=${num%/merge}
              BUILD_VERSION=pr-${num}-"$(date +'%Y%m%d%H%M%S')"
          else
              echo CREATE_RELEASE="true" >> .custom_env
              echo PRE_RELEASE="true" >> .custom_env
              BUILD_VERSION="$(date +'%Y%m%d%H%M%S')"
          fi
          BUILD_NAME_WITH_VERSION="$BUILD_NAME-$BUILD_VERSION"
          echo BUILD_NAME="$BUILD_NAME" >> .custom_env
          echo BUILD_VERSION="$BUILD_VERSION" >> .custom_env
          echo BUILD_NAME_WITH_VERSION="$BUILD_NAME_WITH_VERSION" >> .custom_env
          if test -n "${{ secrets.KEY_PROPERTIES }}"
          then
              echo "${{ secrets.KEY_PROPERTIES }}" > signing.properties
              if test -n "${{ secrets.SIGNING_KEY }}"
              then
                  echo ANDROID_SIGN="true" >> .custom_env
              fi
              cat signing.properties >> .custom_env
          fi
          cat .custom_env
          cat .custom_env >> $GITHUB_ENV
    - name: upload .custom_env
      uses: actions/upload-artifact@master
      with:
          name: custom_env
          path: ./.custom_env
    - name: clean custom env
      run: rm .custom_env
  build_app:
    needs: [build_env]
    name: Build Flutter (${{ matrix.config }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [android, web, linux, windows, ios, macos]
        include:
          - name: android
            config: apk
            os: ubuntu-latest
            FILE_TYPE: apk
            BUILD_ARGS: "--target-platform android-arm64"
            RELEASE_PATH: '*.apk'
            RELEASE_DIRECTORY: build/app/outputs/apk/release
          - name: web
            config: web
            os: ubuntu-latest
            FILE_TYPE: zip
            RELEASE_PATH: .
            RELEASE_DIRECTORY: build/web
          - name: linux
            config: linux
            os: ubuntu-latest
            FILE_TYPE: tar.gz
            ENABLE_CONFIG: linux-desktop
            RELEASE_PATH: .
            RELEASE_DIRECTORY: build/linux/x64/release/bundle
            PRE_COMMAND: sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          - name: windows
            config: windows
            os: windows-latest
            FILE_TYPE: zip
            RELEASE_PATH: .
            RELEASE_DIRECTORY: build/windows/runner/Release
          - name: ios
            config: ios
            os: macos-latest
            FILE_TYPE: ipa
            BUILD_ARGS: "--no-codesign"
            RELEASE_PATH: Payload
            RELEASE_DIRECTORY: build/ios/iphoneos
            POST_COMMAND: |
              cd build/ios/iphoneos
              mkdir Payload
              cd Payload
              ln -s ../Runner.app
          - name: macos
            config: macos
            os: macos-latest
            FILE_TYPE: zip
            ENABLE_CONFIG: macos-desktop
            RELEASE_PATH: .
            RELEASE_DIRECTORY: build/macos/Build/Products/Release
      # Disable fail-fast; we want results from all OSes even if one fails.
      fail-fast: false
    steps:
      - name: download custom env
        uses: actions/download-artifact@v2
        with:
          name: custom_env
      - name: apply custom env
        if: startsWith(matrix.os, 'windows') != true
        run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
      - name: apply custom env - Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          type .custom_env >> $env:GITHUB_ENV
          del .custom_env
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: pre
        run: ${{ matrix.PRE_COMMAND }}
      - name: enable config (${{ matrix.config }})
        if: "${{ matrix.ENABLE_CONFIG != '' }}"
        run: flutter config --enable-${{ matrix.ENABLE_CONFIG }}
      - run: |
          flutter pub get
          flutter build ${{ matrix.config }} ${{ matrix.BUILD_ARGS }}
      - name: post
        run: ${{ matrix.POST_COMMAND }}
      - name: tar.gz
        if: "${{ matrix.FILE_TYPE == 'tar.gz' }}"
        uses: thedoctor0/zip-release@master
        with:
          type: tar
          path: ${{ matrix.RELEASE_PATH }}
          directory: ${{ matrix.RELEASE_DIRECTORY }}
          filename: ${{ github.workspace }}/build/${{ env.BUILD_NAME_WITH_VERSION }}-${{ matrix.name }}.${{ matrix.FILE_TYPE }}
      - name: zip
        if: "${{ matrix.FILE_TYPE == 'zip' || matrix.FILE_TYPE == 'ipa' }}"
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          path: ${{ matrix.RELEASE_PATH }}
          directory: ${{ matrix.RELEASE_DIRECTORY }}
          filename: ${{ github.workspace }}/build/${{ env.BUILD_NAME_WITH_VERSION }}-${{ matrix.name }}.${{ matrix.FILE_TYPE }}
      - uses: AoEiuV020/sign-android-release@v2
        name: Sign release APK
        if: ${{ matrix.FILE_TYPE == 'apk' && env.ANDROID_SIGN == 'true' }}
        with:
          releaseDirectory: ${{ matrix.RELEASE_DIRECTORY }}
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ env.keyAlias }}
          keyStorePassword: ${{ env.storePassword }}
          keyPassword: ${{ env.keyPassword }}
      - name: copy file
        if: "${{ matrix.FILE_TYPE == 'apk' }}"
        run: cp ${{ matrix.RELEASE_DIRECTORY }}/${{ matrix.RELEASE_PATH }} build/${{ env.BUILD_NAME_WITH_VERSION }}-${{ matrix.name }}.${{ matrix.FILE_TYPE }}
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.name }}-build
          path: build/${{ env.BUILD_NAME_WITH_VERSION }}-${{ matrix.name }}.${{ matrix.FILE_TYPE }}
      - name: Deploy
        if: "${{ matrix.name == 'web' && env.CREATE_RELEASE == 'true' }}"
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_orphan: true
          publish_dir: ${{ matrix.RELEASE_DIRECTORY }}/${{ matrix.RELEASE_PATH }}
  release_create:
    needs: [build_app]
    name: create release
    runs-on: ubuntu-latest
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
          name: custom_env
    - name: apply custom env
      run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
    - name: create release
      if: ${{ env.CREATE_RELEASE == 'true' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.BUILD_VERSION }}
        release_name: ${{ env.BUILD_VERSION }}
        body: ${{ github.event.head_commit.message }}
        draft: true
        prerelease: ${{ env.PRE_RELEASE == 'true' }}
    - name: save release env
      if: ${{ env.CREATE_RELEASE == 'true' }}
      run: |
        echo RELEASE_UPLAOD_URL="${{ steps.create_release.outputs.upload_url }}" >> .release_env
        echo RELEASE_UPLAOD_ID="${{ steps.create_release.outputs.id }}" >> .release_env
    - name: upload .release_env
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/upload-artifact@master
      with:
        name: release_env
        path: ./.release_env
  release_upload:
    needs: [release_create]
    name: upload release file
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name: [android, web, linux, windows, ios, macos]
        include:
          - name: android
            FILE_TYPE: apk
          - name: web
            FILE_TYPE: zip
          - name: linux
            FILE_TYPE: tar.gz
          - name: windows
            FILE_TYPE: zip
          - name: ios
            FILE_TYPE: ipa
          - name: macos
            FILE_TYPE: zip
      # Disable fail-fast; we want results from all OSes even if one fails.
      fail-fast: false
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
          name: custom_env
    - name: apply custom env
      run: |
        cat .custom_env >> $GITHUB_ENV
        rm .custom_env
    - name: download release env
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/download-artifact@v2
      with:
          name: release_env
    - name: apply release env
      if: ${{ env.CREATE_RELEASE == 'true' }}
      run: |
        cat .release_env >> $GITHUB_ENV
        rm .release_env
    - name: download (${{ matrix.name }})
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/download-artifact@v2
      with:
          name: ${{ matrix.name }}-build
    - name: Upload Release Asset (${{ matrix.name }})
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLAOD_URL }}
        asset_path: ${{ env.BUILD_NAME_WITH_VERSION }}-${{ matrix.name }}.${{ matrix.FILE_TYPE }}
        asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}-${{ matrix.name }}.${{ matrix.FILE_TYPE }}
        asset_content_type: application/zip
  release_publish:
    needs: [release_upload]
    name: publish release
    runs-on: ubuntu-latest
    steps:
    - name: download custom env
      uses: actions/download-artifact@v2
      with:
        name: custom_env
    - name: apply custom env
      run: |
        cat .custom_env >> $GITHUB_ENV
        rm .custom_env
    - name: download release env
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: actions/download-artifact@v2
      with:
        name: release_env
    - name: apply release env
      if: ${{ env.CREATE_RELEASE == 'true' }}
      run: |
        cat .release_env >> $GITHUB_ENV
        rm .release_env
    - name: publish release
      if: ${{ env.CREATE_RELEASE == 'true' }}
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ env.RELEASE_UPLAOD_ID }}
