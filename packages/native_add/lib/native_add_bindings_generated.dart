// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `go/native_add.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class NativeAddBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeAddBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeAddBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(int a, int b) {
    return _sum(a, b);
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(int a, int b) {
    return _sum_long_running(a, b);
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
        'sum_long_running',
      );
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  /// String addition function
  ffi.Pointer<ffi.Char> sum_string(
    ffi.Pointer<ffi.Char> a,
    ffi.Pointer<ffi.Char> b,
  ) {
    return _sum_string(a, b);
  }

  late final _sum_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('sum_string');
  late final _sum_string =
      _sum_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  /// 非常重要：您必须提供一个函数来释放 sum_string 返回的内存
  void free_string(ffi.Pointer<ffi.Char> str) {
    return _free_string(str);
  }

  late final _free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'free_string',
      );
  late final _free_string =
      _free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// HTTP API function that calls a sum service via HTTP
  /// Returns result via int return value, and error message via char** out parameter
  /// If successful, error_message will be NULL
  /// If fails, result will be -1 and error_message will contain the error
  int sum_via_http(
    int a,
    int b,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_message,
  ) {
    return _sum_via_http(a, b, error_message);
  }

  late final _sum_via_httpPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)
    >
  >('sum_via_http');
  late final _sum_via_http =
      _sum_via_httpPtr
          .asFunction<
            int Function(int, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)
          >();

  /// Free the error message allocated by sum_via_http
  void free_error_message(ffi.Pointer<ffi.Char> error_message) {
    return _free_error_message(error_message);
  }

  late final _free_error_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'free_error_message',
      );
  late final _free_error_message =
      _free_error_messagePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
